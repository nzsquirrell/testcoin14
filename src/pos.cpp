// Copyright (c) 2014-2016 The BlackCoin Core developers
// Copyright (c) 2012-2013 The PPCoin developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include "pos.h"

#include "chain.h"
#include "chainparams.h"
#include "clientversion.h"
#include "coins.h"
#include "hash.h"
#include "validation.h"
#include "uint256.h"
#include "primitives/transaction.h"
#include <stdio.h>
#include "util.h"

// Stake Modifier (hash modifier of proof-of-stake):
// The purpose of stake modifier is to prevent a txout (coin) owner from
// computing future proof-of-stake generated by this txout at the time
// of transaction confirmation. To meet kernel protocol, the txout
// must hash with a future stake modifier to generate the proof.
uint256 ComputeStakeModifier(const CBlockIndex* pindexPrev, const uint256& kernel)
{
    if (!pindexPrev)
        return uint256();  // genesis block's modifier is 0

    CDataStream ss(SER_GETHASH, 0);
    ss << kernel << pindexPrev->nStakeModifier;
    return Hash(ss.begin(), ss.end());
}

// BlackCoin kernel protocol v3
// coinstake must meet hash target according to the protocol:
// kernel (input 0) must meet the formula
//     hash(nStakeModifier + blockFromTime + txPrev.vout.hash + txPrev.vout.n + nTime) < bnTarget * nWeight
// this ensures that the chance of getting a coinstake is proportional to the
// amount of coins one owns.
// The reason this hash is chosen is the following:
//   nStakeModifier: scrambles computation to make it very difficult to precompute
//                   future proof-of-stake
//   blockFromTime: nTime from the block that contains txPrev
//   txPrev.vout.hash: hash of txPrev, to reduce the chance of nodes
//                     generating coinstake at the same time
//   txPrev.vout.n: output number of txPrev, to reduce the chance of nodes
//                  generating coinstake at the same time
//   nTime: current timestamp
//   block/tx hash should not be used here as they can be generated in vast
//   quantities so as to generate blocks faster, degrading the system back into
//   a proof-of-work situation.
//

bool CheckStakeKernelHash(const CBlockIndex* pindexPrev, unsigned int nBits, uint32_t blockFromTime, const CCoins* txPrev, const COutPoint& prevout, unsigned int nTimeBlock)
{
    if (nTimeBlock < blockFromTime)  // Transaction timestamp violation
        return error("CheckStakeKernelHash() : nTime violation");

    // Base target
    arith_uint256 bnTarget;
    bnTarget.SetCompact(nBits);
    //LogPrintf("CheckStakeKernelHash() : bnTarget=%s\n", bnTarget.GetHex());

    // Weighted target
    int64_t nValueIn = txPrev->vout[prevout.n].nValue;
    //LogPrintf("CheckStakeKernelHash() : nValueIn=%u\n", nValueIn);
    if (nValueIn == 0)
        return false;
    arith_uint256 bnWeight = arith_uint256(nValueIn);
    bnTarget *= bnWeight;
    //LogPrintf("CheckStakeKernelHash() : weighted bnTarget=%s\n", bnTarget.GetHex());

    // Calculate hash
    CHashWriter ss(SER_GETHASH, 0);
    ss << pindexPrev->nStakeModifier << blockFromTime << prevout.hash << prevout.n << nTimeBlock;
    uint256 hashProofOfStake = ss.GetHash();

    LogPrintf("CheckStakeKernelHash() : check modifier=%s nTimeBlockFrom=%u nPrevout=%u nTimeBlock=%u hashProof=%s\n",
        pindexPrev->nStakeModifier.GetHex().c_str(),
        blockFromTime, prevout.n, nTimeBlock,
        hashProofOfStake.ToString());

    //LogPrintf("CheckStakeKernelHash() : hashProofOfStake=%s\n", hashProofOfStake.GetHex());
    // Now check if proof-of-stake hash meets target protocol
    if (UintToArith256(hashProofOfStake) > bnTarget)
        return false;

    return true;
}

// Check kernel hash target and coinstake signature
/*
    pindexPrev = index to the previous block in the blockchain
    tx = the coinstake transaction
    nBits = the difficulty of this new PoS block
    nTimeBlock = the timstamp of this new PoS block
*/
bool CheckProofOfStake(CBlockIndex* pindexPrev, const CTransaction& tx, unsigned int nBits, uint32_t nTimeBlock, CValidationState &state)
{
    // ensure the transaction is a coinstake tx
    if (!tx.IsCoinStake())
        return error("CheckProofOfStake() : called on non-coinstake %s", tx.GetHash().ToString());

    // Kernel (input 0) must match the stake hash target (nBits)
    const CTxIn& txin = tx.vin[0];

    // First try finding the previous output transaction in database - requires the transaction (txindex) to be enabled
    uint256 hashBlock;
    //CTransaction txPrev;
    CTransactionRef txPrev;
    if (!GetTransaction(txin.prevout.hash, txPrev, Params().GetConsensus(), hashBlock, true))
        return error("CheckProofOfStake() : INFO: read txPrev failed");


    //verify signature
    if (!VerifySignature(*txPrev, tx, 0, SCRIPT_VERIFY_NONE, 0))
        return state.DoS(100, error("CheckProofOfStake() : VerifySignature failed on coinstake %s", tx.GetHash().ToString()));

    // find the index to the block containing the output transaction
    CBlockIndex* pindex = NULL;
    BlockMap::iterator it = mapBlockIndex.find(hashBlock);
    if (it != mapBlockIndex.end())
        pindex = it->second;
    else
        return error("CheckProofOfStake() : read block failed");

    // Read block header
    CBlock blockprev;
    if (!ReadBlockFromDisk(blockprev, pindex->GetBlockPos(), Params().GetConsensus()))
        return error("CheckProofOfStake(): INFO: failed to find block");

    // now confirm the difficulty of the computed kernel is less than nBits
    if (!CheckStakeKernelHash(pindexPrev, nBits, blockprev.nTime, new CCoins(*txPrev, pindexPrev->nHeight), txin.prevout, nTimeBlock))
       return state.DoS(1, error("CheckProofOfStake() : INFO: check kernel failed on coinstake %s", tx.GetHash().ToString())); // may occur during initial download or if behind on block chain sync

    // all good, return success
    return true;
}

bool VerifySignature(const CTransaction& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)
{
    assert(nIn < txTo.vin.size());

    TransactionSignatureChecker checker(&txTo, nIn, 0);

    const CTxIn& txin = txTo.vin[nIn];
    if (txin.prevout.n >= txFrom.vout.size())
        return false;
    const CTxOut& txout = txFrom.vout[txin.prevout.n];

    if (txin.prevout.hash != txFrom.GetHash())
        return false;

    return VerifyScript(txin.scriptSig, txout.scriptPubKey, NULL, flags, checker);
}
